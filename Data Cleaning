--DATA CLEANING PROJECT -- 
--Housing Data
--Real Estate 

Select *
From NashvilleHousing

 --Std Date


Select saleDate, CONVERT(Date,SaleDate) as SaleDate --this will convert saleDate format from date and time to only date
From NashvilleHousing


Update NashvilleHousing
SET SaleDate = CONVERT(Date,SaleDate)

--ALTER TABLE NashvilleHousing 
--Add SaleDateConverted Date;

--Update NashvilleHousing
--SET SaleDate = CONVERT(Date,SaleDate)

-- END --


--Populate Property Address data

Select *
From NashvilleHousing
--Where PropertyAddress is null
order by ParcelID --There's going to be Duplicate in ParcelID and Property Address


Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, isnull(a.PropertyAddress, b.PropertyAddress)
From NashvilleHousing a
Join NashvilleHousing b
	on a.ParcelID = b.ParcelID
	And a.[UniqueID] <>  b.[UniqueID]
--Scenario: Parcelid and PropertyAddress are same hence we need to filter using UniqueID
Where a.PropertyAddress is null
--Scenario: isnull isnull(a.PropertyAddress ( if Property address is null in a then get property address of b then create new column, b.PropertyAddress)

Update a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
From NashvilleHousing a
JOIN NashvilleHousing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null

-- Scenario: After Running update a.

Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
From NashvilleHousing a
Join NashvilleHousing b
	on a.ParcelID = b.ParcelID
	And a.[UniqueID] <>  b.[UniqueID]

-- Ending will have a new Table

-- END --


-- Breaking out Address into Individual Columns (Address, City, State)
-- Delimiter

Select PropertyAddress
From NashvilleHousing

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) as Address, --Charindex is looking for a specific value.. in this case address 1st value until "," then -1
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address --notice there's no number after 1st prorperty address
From NashvilleHousing

ALTER TABLE NashvilleHousing
Add PropertySplitAddress Nvarchar(255)

Update NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )


ALTER TABLE NashvilleHousing
Add PropertySplitCity Nvarchar(255);

Update NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))


Select PropertySplitAddress, PropertySplitCity
From NashvilleHousing


--END--

---OWNER ADDRESS---

Select OwnerAddress
From NashvilleHousing


Select
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3), --PARSENAME is backwards or counts backwards. Also, it only works for "." hence the need to replace ","
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2),
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
From NashvilleHousing



ALTER TABLE NashvilleHousing
Add OwnerSplitAddress Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)

-- To Check 
Select OwnerSplitAddress
From NashvilleHousing


ALTER TABLE NashvilleHousing
Add OwnerSplitCity Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)


ALTER TABLE NashvilleHousing
Add OwnerSplitState Nvarchar(255);

Update NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)



Select OwnerSplitAddress,OwnerSplitCity,OwnerSplitState
From NashvilleHousing
where  OwnerSplitAddress is not null -- just Added this 

Select *
From NashvilleHousing

--END--




--


--Change Y and N to Yes and No in "Sold as Vacant" field

Select Distinct(SoldAsVacant)  --to check value(information) in Sold as vacant.. 4..yes..no..y..n..
From NashvilleHousing



Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From NashvilleHousing
Group by SoldAsVacant
order by 2



--SoldAsVacant	(No column name)
--Y	              52
--N	              399
--Yes	            4623
--No	            51403




Select SoldAsVacant,
CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From NashvilleHousing


Update NashvilleHousing --to update SoldasVacant
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END

Select Distinct(SoldAsVacant), Count(SoldAsVacant) Sold_As_Vacant
From NashvilleHousing
Group by SoldAsVacant
order by 2

SoldAsVacant	Sold_As_Vacant
Yes         	  4675
No	            51802


-- END -- 

--Remove Duplicates
--1. Identify the Dupelicate 

Select *,
ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					)row_num

From NashvilleHousing
order by ParcelID

-- This is to tag the duplicate

-- 2. How to remove duplicate after identifying


WITH RowNumCTE AS(
Select *,
ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num
From NashvilleHousing
--order by ParcelID
)

Select *
from RowNumCTE
Where row_num > 1
Order by PropertyAddress


Delete
From RowNumCTE
Where row_num > 1


Select *
From NashvilleHousing

--1. Identification of Duplicates ( by creating a new column and placing a mark)
--2. Removal of Duplicates

--END--

---- Delete Unused Columns

Select *
From NashvilleHousing


ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate

--OwnerAddress, TaxDistrict, PropertyAddress, SaleDate goneee

--END--
